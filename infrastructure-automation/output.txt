=== roles/verification_client/templates/verify_helper.sh.j2 ===
#!/bin/bash

MAGIC="48"
DOMAIN="yellow.lab"
PRIMARY_IP="172.16.30.48"
ALIAS_IP="172.16.32.48"
NFS_EXPORT="/srv/nfs"

USER1="user1"
USER1_PASS="user1"
USER2="user2"
USER2_PASS="user2"

# =============================
echo "== Creating mount points =="
# =============================
mkdir -p /mnt/{pub-u1,priv-u1,pub-u2,priv-u2,nfs}

# =============================
echo "=== DNS Full Zone Transfer Check ==="
# =============================
echo "\$ dig @${PRIMARY_IP} ${DOMAIN} AXFR"
dig @${PRIMARY_IP} ${DOMAIN} AXFR

# =============================
echo -e "\n=== Forward Lookup Check ==="
echo "\$ dig www1.${DOMAIN}"
dig www1.${DOMAIN} +norecurse

# =============================
echo -e "\n=== Reverse Lookup Check ==="
echo "\$ dig -x ${PRIMARY_IP}"
dig -x ${PRIMARY_IP} +norecurse

# =============================
echo -e "\n=== HTTP Test for www1.${DOMAIN} ==="
echo "\$ curl -s http://www1.${DOMAIN}"
curl -s http://www1.${DOMAIN}

# =============================
echo -e "\n=== HTTP Test for www2.${DOMAIN} ==="
echo "\$ curl -s http://www2.${DOMAIN}"
curl -s http://www2.${DOMAIN}

# =============================
echo -e "\n=== HTTPS Test for secure.${DOMAIN} ==="
echo "\$ curl -sk https://secure.${DOMAIN}"
curl -sk https://secure.${DOMAIN}

# =============================
echo -e "\n=== Mounting Samba shares ==="
# =============================
mount -t cifs //${PRIMARY_IP}/samba-public  /mnt/pub-u1 \
    -o username=${USER1},password=${USER1_PASS},file_mode=0777,dir_mode=0777

mount -t cifs //${PRIMARY_IP}/samba-private /mnt/priv-u1 \
    -o username=${USER1},password=${USER1_PASS},file_mode=0777,dir_mode=0777

mount -t cifs //${PRIMARY_IP}/samba-public  /mnt/pub-u2 \
    -o username=${USER2},password=${USER2_PASS},file_mode=0777,dir_mode=0777

mount -t cifs //${PRIMARY_IP}/samba-private /mnt/priv-u2 \
    -o username=${USER2},password=${USER2_PASS},file_mode=0777,dir_mode=0777

# =============================
echo "== Mounting NFS share =="
# =============================
mount -t nfs ${PRIMARY_IP}:${NFS_EXPORT} /mnt/nfs

# =============================
echo "== Writing to shares =="
# =============================
echo "Hello from ${USER1} public"  > /mnt/pub-u1/u1_pub.txt
echo "Hello from ${USER1} private" > /mnt/priv-u1/u1_priv.txt
echo "Hello from ${USER2} public"  > /mnt/pub-u2/u2_pub.txt

echo "Trying to write as ${USER2} to private (should fail)"
echo "Hello from ${USER2} private" > /mnt/priv-u2/u2_priv.txt 2>/mnt/priv-u2/u2_priv_error.log \
    || echo "Permission denied as expected"

echo "Writing to NFS"
echo "Hello from NFS client" > /mnt/nfs/nfs_test.txt

# =============================
echo "== Results =="
# =============================
echo "--- /mnt/pub-u1/u1_pub.txt ---"
cat /mnt/pub-u1/u1_pub.txt

echo "--- /mnt/priv-u1/u1_priv.txt ---"
cat /mnt/priv-u1/u1_priv.txt

echo "--- /mnt/pub-u2/u2_pub.txt ---"
cat /mnt/pub-u2/u2_pub.txt

echo "--- /mnt/priv-u2/u2_priv.txt (should fail or be empty) ---"
cat /mnt/priv-u2/u2_priv.txt 2>/dev/null || echo "[Failed to read]"

echo "--- /mnt/nfs/nfs_test.txt ---"
cat /mnt/nfs/nfs_test.txt

ls /opt/named/slaves/
cat /opt/named/slaves/*
rm -rf /opt/named/slaves/*
ls /opt/named/slaves/
podman restart bind-slave

sleep 3


cat /opt/named/slaves/*

echo "== Done =="

=== roles/verification_client/templates/mount_and_test_all.sh.j2 ===
#!/bin/bash
echo "== Creating mount points =="
mkdir -p /mnt/pub-u1 /mnt/priv-u1 /mnt/pub-u2 /mnt/priv-u2 /mnt/nfs

echo "== Mounting Samba shares (with full client-side permissions) =="
mount -t cifs //172.16.30.48/samba-public  /mnt/pub-u1 \
    -o username=user1,password=user1,file_mode=0777,dir_mode=0777

mount -t cifs //172.16.30.48/samba-private /mnt/priv-u1 \
    -o username=user1,password=user1,file_mode=0777,dir_mode=0777

mount -t cifs //172.16.30.48/samba-public  /mnt/pub-u2 \
    -o username=user2,password=user2,file_mode=0777,dir_mode=0777

mount -t cifs //172.16.30.48/samba-private /mnt/priv-u2 \
    -o username=user2,password=user2,file_mode=0777,dir_mode=0777

echo "== Mounting NFS share =="
mount -t nfs 172.16.30.48:/srv/nfs /mnt/nfs

echo "== Writing to shares =="

echo "Hello from user1 public"  > /mnt/pub-u1/u1_pub.txt
echo "Hello from user1 private" > /mnt/priv-u1/u1_priv.txt

echo "Hello from user2 public"  > /mnt/pub-u2/u2_pub.txt

echo "Trying to write as user2 to private (should fail)"
echo "Hello from user2 private" > /mnt/priv-u2/u2_priv.txt 2>/mnt/priv-u2/u2_priv_error.log \
    || echo "Permission denied as expected"

echo "Writing to NFS"
echo "Hello from NFS client" > /mnt/nfs/nfs_test.txt

echo "== Results =="
echo "--- /mnt/pub-u1/u1_pub.txt ---"
cat /mnt/pub-u1/u1_pub.txt

echo "--- /mnt/priv-u1/u1_priv.txt ---"
cat /mnt/priv-u1/u1_priv.txt

echo "--- /mnt/pub-u2/u2_pub.txt ---"
cat /mnt/pub-u2/u2_pub.txt

echo "--- /mnt/priv-u2/u2_priv.txt (should fail or be empty) ---"
cat /mnt/priv-u2/u2_priv.txt 2>/dev/null || echo "[Failed to read]"

echo "--- /mnt/nfs/nfs_test.txt ---"
cat /mnt/nfs/nfs_test.txt

echo "== Done =="

=== roles/verification_client/tasks/main.yml ===
- name: Ensure output file is clean
  copy:
    content: ""
    dest: /root/verification.log
    force: true
    owner: root
    mode: '0644'

- name: Copy verification helper script
  template:
    src: verify_helper.sh.j2
    dest: /usr/local/bin/verify_helper.sh
    mode: '0755'

- name: Run full verification suite
  shell: /usr/local/bin/verify_helper.sh >> /root/verification.log 2>&1
  args:
    executable: /bin/bash

=== roles/bind-master/templates/fwd.zone.j2 ===
$TTL 86400
@   IN SOA {{ name_server }}1.{{ bind_domain }}. dnsadmin.{{ bind_domain }}. (
        {{ bind_serial }}
        3600
        1800
        604800
        86400
)

    IN NS {{ name_server }}1.{{ bind_domain }}.
    IN NS {{ name_server }}2.{{ bind_domain }}.

{% for record in bind_a_records %}
{{ record.name }} IN A {{ record.ip }}
{% endfor %}

=== roles/bind-master/templates/rev.16.172.j2 ===
$TTL 86400
@   IN SOA {{ name_server }}1.{{ bind_domain }}. dnsadmin.{{ bind_domain }}. (
        {{ bind_serial }}
        3600
        1800
        604800
        86400
)

    IN NS {{ name_server }}1.{{ bind_domain }}.
    IN NS {{ name_server }}2.{{ bind_domain }}.

{% for record in bind_ptr %}
{{ record.octet }} IN PTR {{ record.fqdn }}
{% endfor %}

=== roles/bind-master/templates/named.conf.j2 ===
options {
    directory "/var/named";
    listen-on { {% for ip in bind_listen_ipv4 %} {{ ip }}; {% endfor %} };
    listen-on-v6 { none; };
    allow-query { any; };
    recursion yes;
    allow-transfer { {{ client_ip }}; };
    dnssec-validation yes;
    auth-nxdomain no;
    pid-file "/var/run/named/named.pid";

};

zone "{{ bind_domain }}" IN {
    type master;
    file "fwd.{{ bind_domain }}";
    allow-transfer { {{ client_ip }}; };
    also-notify { {{ client_ip }}; };     // notify slave when zone changes
    notify yes;
    allow-update { none; };

};

zone "16.172.in-addr.arpa" IN {
    type master;
    file "rev.16.172";
    allow-transfer { {{ client_ip }}; };
    also-notify { {{ client_ip }}; };     // notify slave when zone changes
    notify yes;
    allow-update { none; };
};

=== roles/bind-master/tasks/main.yml ===
- name: Ensure bind directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ bind_uid }}"
    group: "{{ bind_gid }}"
    mode: '0750'
  loop:
    - "{{ bind_dir }}/config"
    - "{{ bind_dir }}/zones"

- name: Deploy named.conf
  ansible.builtin.template:
    src: named.conf.j2
    dest: "{{ bind_dir }}/config/named.conf"
    owner: "{{ bind_uid }}"
    group: "{{ bind_gid }}"
    mode: '0640'

- name: Download bind9 image from host machine
  ansible.builtin.get_url:
    url: "http://{{ host_machine_ip }}:8080/bind9.tar"
    dest: /root/bind9.tar
    mode: '0640'

- name: Load bind9 image into Podman
  ansible.builtin.command: podman load -i /root/bind9.tar
  register: podman_load
  changed_when: "'Loaded image' in podman_load.stdout"

- name: Deploy forward zone file
  template:
    src: "fwd.zone.j2"
    dest: "{{ bind_dir }}/zones/fwd.{{ bind_domain }}"
    owner: "{{ bind_uid }}"
    group: "{{ bind_gid }}"
    mode: '0640'

- name: Deploy reverse zone file
  template:
    src: "rev.16.172.j2"
    dest: "{{ bind_dir }}/zones/rev.16.172"
    owner: "{{ bind_uid }}"
    group: "{{ bind_gid }}"
    mode: '0640'

- name: Remove existing bind-master container (if exists)
  containers.podman.podman_container:
    name: bind-master
    state: absent

- name: Run bind-master container
  containers.podman.podman_container:
    name: bind-master
    image: "{{ bind_image }}"
    state: started
    recreate: true
    hostname: bind-master
    network: host
    volume:
      - /opt/named/config/named.conf:/etc/named.conf:Z
      - /opt/named/zones:/var/named:Z
    command:
      - -c
      - /etc/named.conf
      - -g
      - -u
      - bind


=== roles/iptables/tasks/main.yml ===

- name: Flush all iptables rules before applying new ones
  command: iptables -F
# ─────────────────────────────
# 🔐 Allow loopback and established connections
# ─────────────────────────────
- name: Allow loopback traffic
  iptables:
    chain: INPUT
    in_interface: lo
    jump: ACCEPT
    state: present

- name: Allow established and related traffic
  iptables:
    chain: INPUT
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
    state: present

- name: Allow established and related traffic
  iptables:
    chain: OUTPUT
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
    state: present

- name: Allow all traffic from client subnet (172.16.31.0/24)
  iptables:
    chain: INPUT
    source: "{{ client_network }}"
    jump: ACCEPT
    state: present

- name: Allow all traffic from host network (172.16.0.0/24)
  iptables:
    chain: INPUT
    source: "172.16.0.0/24"
    jump: ACCEPT
    state: present

- name: Allow all traffic from client subnet (172.16.31.0/24)
  iptables:
    chain: OUTPUT
    source: "{{ client_network }}"
    jump: ACCEPT
    state: present

- name: Allow all traffic from host network (172.16.0.0/24)
  iptables:
    chain: OUTPUT
    source: "172.16.0.0/24"
    jump: ACCEPT
    state: present

- name: Allow all traffic from client subnet (172.16.31.0/24)
  iptables:
    chain: FORWARD
    source: "{{ client_network }}"
    jump: ACCEPT
    state: present

- name: Allow all traffic from host network (172.16.0.0/24)
  iptables:
    chain: FORWARD
    source: "172.16.0.0/24"
    jump: ACCEPT
    state: present

    
- name: Set iptables default policies to DROP
  command: iptables -P {{ item.chain }} DROP
  loop:
    - { chain: 'INPUT' }

# ─────────────────────────────
# 🌐 DNS (Port 53)
# ─────────────────────────────
- name: Allow DNS (UDP)
  iptables:
    chain: INPUT
    protocol: udp
    destination_port: 53
    source: "{{ full_network }}"
    jump: ACCEPT
    state: present

- name: Allow DNS (TCP)
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 53
    source: "{{ full_network }}"
    jump: ACCEPT
    state: present

# ─────────────────────────────
# 🌐 Web (HTTP 80, HTTPS 443)
# ─────────────────────────────
- name: Allow HTTP
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 80
    source: "{{ full_network }}"
    jump: ACCEPT
    state: present

- name: Allow HTTPS
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 443
    source: "{{ full_network }}"
    jump: ACCEPT
    state: present

# ─────────────────────────────
# 📁 Samba
# ─────────────────────────────
- name: Allow Samba TCP 139
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 139
    source: "{{ full_network }}"
    jump: ACCEPT
    state: present

- name: Allow Samba TCP 445
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 445
    source: "{{ full_network }}"
    jump: ACCEPT
    state: present

- name: Allow Samba UDP 137
  iptables:
    chain: INPUT
    protocol: udp
    destination_port: 137
    source: "{{ full_network }}"
    jump: ACCEPT
    state: present

- name: Allow Samba UDP 138
  iptables:
    chain: INPUT
    protocol: udp
    destination_port: 138
    source: "{{ full_network }}"
    jump: ACCEPT
    state: present

# ─────────────────────────────
# 📦 NFS (2049 + rpcbind + mountd)
# ─────────────────────────────
- name: Allow NFS (TCP)
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 2049
    source: "{{ full_network }}"
    jump: ACCEPT
    state: present

- name: Allow NFS (UDP)
  iptables:
    chain: INPUT
    protocol: udp
    destination_port: 2049
    source: "{{ full_network }}"
    jump: ACCEPT
    state: present

- name: Allow rpcbind TCP
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 111
    source: "{{ full_network }}"
    jump: ACCEPT
    state: present

- name: Allow rpcbind UDP
  iptables:
    chain: INPUT
    protocol: udp
    destination_port: 111
    source: "{{ full_network }}"
    jump: ACCEPT
    state: present

- name: Allow mountd TCP
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 20048
    source: "{{ full_network }}"
    jump: ACCEPT
    state: present

- name: Allow mountd UDP
  iptables:
    chain: INPUT
    protocol: udp
    destination_port: 20048
    source: "{{ full_network }}"
    jump: ACCEPT
    state: present

=== roles/iptables/handlers/iptables-handlers.yml ===
- name: Reload iptables
  service:
    name: iptables
    state: restarted
=== roles/common/tasks/main.yml ===
- name: Create "{{ new_user }}" user with sudo (wheel) access
  user:
    name: "{{ new_user }}"
    password: "{{ new_user_pass  | password_hash('sha512') }}"
    groups: wheel
    append: yes
    update_password: on_create


=== roles/bind_slave/templates/named.conf.j2 ===
options {
    directory "/var/named";
    listen-on { 127.0.0.1; {{ client_ip }}; };
    listen-on-v6 { none; };
    allow-query { any; };
    recursion yes;
    dnssec-validation yes;
    auth-nxdomain no;
    pid-file "/var/run/named/named.pid";
};

zone "{{ bind_domain }}" IN {
    type slave;
    masters { {{ primary_server_ip }}; };
    file "slaves/fwd.{{ bind_domain }}";
};

zone "16.172.in-addr.arpa" IN {
    type slave;
    masters { {{ primary_server_ip }}; };
    file "slaves/rev.16.172";
};
=== roles/bind_slave/tasks/main.yml ===
- name: Ensure bind directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ bind_uid }}"
    group: "{{ bind_gid }}"
    mode: '0750'
  loop:
    - "{{ bind_dir }}/config"
    - "{{ bind_dir }}/zones"
    - "{{ bind_dir }}/slaves"

- name: Deploy named.conf
  ansible.builtin.template:
    src: named.conf.j2
    dest: "{{ bind_dir }}/config/named.conf"
    owner: "{{ bind_uid }}"
    group: "{{ bind_gid }}"
    mode: '0640'

- name: Download bind9 image from host machine
  ansible.builtin.get_url:
    url: "http://{{ host_machine_ip }}:8080/bind9.tar"
    dest: /root/bind9.tar
    mode: '0640'

- name: Load bind9 image into Podman
  ansible.builtin.command: podman load -i /root/bind9.tar
  register: podman_load
  changed_when: "'Loaded image' in podman_load.stdout"

- name: Remove old bind-slave container if exists
  containers.podman.podman_container:
    name: bind-slave
    state: absent
    

- name: Run bind slave container
  containers.podman.podman_container:
    name: bind-slave
    image: "{{ bind_image }}"
    state: started
    restart_policy: always
    hostname: bind-slave
    network: host
    volumes:
      - "{{ bind_dir }}/config/named.conf:/etc/named.conf:Z"
      - "{{ bind_dir }}/zones:/var/named:Z"
      - "{{ bind_dir }}/slaves:/var/named/slaves:Z"
    command: ["-c", "/etc/named.conf", "-g", "-u", "bind"]


=== roles/verification_server/templates/verify.sh.j2 ===
#!/bin/bash

MAGIC="48"
DOMAIN="yellow.lab"
PRIMARY_IP="172.16.30.48"
ALIAS_IP="172.16.32.48"
NFS_EXPORT="/srv/nfs"

USER1="user1"
USER1_PASS="user1"
USER2="user2"
USER2_PASS="user2"

LOG_FILE="/root/verification.log"

exec > >(tee -a "$LOG_FILE") 2>&1

# =============================
echo "== Creating mount points =="
# =============================
sudo mkdir -p /mnt/{pub-u1,priv-u1,pub-u2,priv-u2,nfs}
sudo chmod -R 777 /mnt/nfs

# =============================
echo -e "\n=== Mounting Samba shares ==="
# =============================
sudo mount -t cifs //${PRIMARY_IP}/samba-public  /mnt/pub-u1 \
    -o username=${USER1},password=${USER1_PASS},file_mode=0777,dir_mode=0777

sudo mount -t cifs //${PRIMARY_IP}/samba-private /mnt/priv-u1 \
    -o username=${USER1},password=${USER1_PASS},file_mode=0777,dir_mode=0777

sudo mount -t cifs //${PRIMARY_IP}/samba-public  /mnt/pub-u2 \
    -o username=${USER2},password=${USER2_PASS},file_mode=0777,dir_mode=0777

sudo mount -t cifs //${PRIMARY_IP}/samba-private /mnt/priv-u2 \
    -o username=${USER2},password=${USER2_PASS},file_mode=0777,dir_mode=0777

# =============================
echo "== Mounting NFS share =="
# =============================
sudo mount -t nfs ${PRIMARY_IP}:${NFS_EXPORT} /mnt/nfs

# =============================
echo "== Writing to shares =="
# =============================
echo "Hello from ${USER1} public"  > /mnt/pub-u1/u1_pub.txt
echo "Hello from ${USER1} private" > /mnt/priv-u1/u1_priv.txt
echo "Hello from ${USER2} public"  > /mnt/pub-u2/u2_pub.txt

echo "Trying to write as ${USER2} to private (should fail)"
echo "Hello from ${USER2} private" > /mnt/priv-u2/u2_priv.txt 2>/mnt/priv-u2/u2_priv_error.log \
    || echo "Permission denied as expected"

echo "Writing to NFS"
echo "Hello from dont work server" > /mnt/nfs/nfs_test.txt

# =============================
echo "== Results =="
# =============================
echo "--- /mnt/pub-u1/u1_pub.txt ---"
cat /mnt/pub-u1/u1_pub.txt

echo "--- /mnt/priv-u1/u1_priv.txt ---"
cat /mnt/priv-u1/u1_priv.txt

echo "--- /mnt/pub-u2/u2_pub.txt ---"
cat /mnt/pub-u2/u2_pub.txt

echo "--- /mnt/priv-u2/u2_priv.txt (should fail or be empty) ---"
cat /mnt/priv-u2/u2_priv.txt 2>/dev/null || echo "[Failed to read]"

echo "--- /mnt/nfs/nfs_test.txt ---"
cat /mnt/nfs/nfs_test.txt

# =============================
echo "== iptables rules =="
# =============================
sudo iptables -L -n -v


echo "== Done =="

=== roles/verification_server/tasks/main.yml ===
- name: Ensure output file is clean
  copy:
    content: ""
    dest: /home/ansible/verification.log
    force: true
    owner: ansible
    group: ansible
    mode: '0644'
  become: false

- name: Copy verification helper script
  template:
    src: verify.sh.j2
    dest: /home/ansible/verify_helper.sh
    owner: ansible
    group: ansible
    mode: '0755'
  become: false

- name: Run full verification suite as ansible (non-root)
  shell: /home/ansible/verify_helper.sh >> /home/ansible/verification.log 2>&1
  args:
    executable: /bin/bash
  become: false

=== roles/nfs/templates/exports.j2 ===
{{ nfs_path }} {{ client_network }}(rw,sync,no_root_squash)
{{ nfs_path }} {{ primary_server_network }}(ro,sync,no_root_squash)
=== roles/nfs/tasks/main.yml ===
- name: Install NFS packages
  dnf:
    name: "{{ nfs_packages }}"
    state: present

- name: Enable and start nfs-server
  systemd:
    name: nfs-server
    enabled: true
    state: started

- name: Ensure NFS share directory exists
  file:
    path: "{{ nfs_path }}"
    state: directory
    owner: root
    group: root
    mode: '0777'

- name: Create readme.nfs with student name
  copy:
    content: "Created by Hmoad Hajali\n"
    dest: "{{ nfs_path }}/readme.nfs"
    mode: '0644'

- name: Configure exports
  template:
    src: exports.j2
    dest: /etc/exports
    owner: root
    group: root
    mode: '0644'
  notify: Export NFS Shares

=== roles/nfs/handlers/main.yml ===
---
- name: Export NFS Shares
  command: exportfs -ra

=== roles/apache-blue/templates/www.conf.j2 ===
<VirtualHost {{ site_ip }}:{{ site_port }}>
    ServerName {{ site_name }}.{{ bind_domain }}
    DocumentRoot /usr/local/apache2/htdocs/{{ site_name }}
</VirtualHost>

=== roles/apache-blue/templates/www1.conf.j2 ===
<VirtualHost {{ apache_primary_ip }}:80>
    ServerName www1.{{ bind_domain }}
    DocumentRoot /usr/local/apache2/htdocs/www1
</VirtualHost>

=== roles/apache-blue/templates/index.html.j2 ===
<h1>MAGIC#{{ magic_number }} - {{ site_name }}.{{ bind_domain }}</h1>

=== roles/apache-blue/templates/www2.conf.j2 ===
<VirtualHost {{ apache_primary_ip }}:80>
    ServerName www2.{{ bind_domain }}
    DocumentRoot /usr/local/apache2/htdocs/www2
</VirtualHost>

=== roles/apache-blue/templates/httpd.conf.j2 ===
ServerName {{ apache_sites[0].name }}.{{ bind_domain }}

ServerRoot "/usr/local/apache2"
Listen 80
Listen 443

# Load essential modules
LoadModule mpm_event_module modules/mod_mpm_event.so
LoadModule authn_file_module modules/mod_authn_file.so
LoadModule authn_core_module modules/mod_authn_core.so
LoadModule authz_host_module modules/mod_authz_host.so
LoadModule authz_core_module modules/mod_authz_core.so
LoadModule access_compat_module modules/mod_access_compat.so
LoadModule auth_basic_module modules/mod_auth_basic.so
LoadModule reqtimeout_module modules/mod_reqtimeout.so
LoadModule mime_module modules/mod_mime.so
LoadModule log_config_module modules/mod_log_config.so
LoadModule env_module modules/mod_env.so
LoadModule headers_module modules/mod_headers.so
LoadModule setenvif_module modules/mod_setenvif.so
LoadModule version_module modules/mod_version.so
LoadModule unixd_module modules/mod_unixd.so
LoadModule status_module modules/mod_status.so
LoadModule autoindex_module modules/mod_autoindex.so
LoadModule dir_module modules/mod_dir.so
LoadModule alias_module modules/mod_alias.so
LoadModule ssl_module modules/mod_ssl.so

User www-data
Group www-data

ServerAdmin you@example.com

<Directory />
    AllowOverride none
    Require all denied
</Directory>

<Files ".ht*">
    Require all denied
</Files>

ErrorLog /proc/self/fd/2
LogLevel warn
CustomLog /proc/self/fd/1 common

<Directory "/usr/local/apache2/cgi-bin">
    AllowOverride None
    Options None
    Require all granted
</Directory>

<IfModule headers_module>
    RequestHeader unset Proxy early
</IfModule>

<IfModule mime_module>
    TypesConfig conf/mime.types
    AddType application/x-compress .Z
    AddType application/x-gzip .gz .tgz
</IfModule>

<IfModule ssl_module>
    SSLRandomSeed startup builtin
    SSLRandomSeed connect builtin
</IfModule>

<Directory "/usr/local/apache2/htdocs">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
</Directory>

# Load custom vhost configs
IncludeOptional conf/sites/*.conf

=== roles/apache-blue/templates/secure.conf.j2 ===
<VirtualHost {{ site_ip }}:{{ site_port }}>
    ServerName {{ site_name }}.{{ bind_domain }}
    DocumentRoot /usr/local/apache2/htdocs/{{ site_name }}

    SSLEngine on
    SSLCertificateFile /usr/local/apache2/conf/ssl/{{ site_name }}.crt
    SSLCertificateKeyFile /usr/local/apache2/conf/ssl/{{ site_name }}.key
</VirtualHost>

=== roles/apache-blue/tasks/main.yml ===
- name: Create Apache directories
  file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - "{{ apache_conf_dir }}/sites"
    - "{{ apache_docroot_dir }}/www1"
    - "{{ apache_docroot_dir }}/www2"
    - "{{ apache_docroot_dir }}/secure"
    - "{{ apache_ssl_dir }}"

- name: Deploy site index pages from template
  template:
    src: index.html.j2
    dest: "{{ apache_docroot_dir }}/{{ item.name }}/index.html"
    mode: "0644"
  loop: "{{ apache_sites }}"
  vars:
    site_name: "{{ item.name }}"

- name: Generate SSL key and cert for secure site
  command: >
    openssl req -x509 -nodes -days 365 -newkey rsa:2048
    -keyout {{ apache_ssl_dir }}/secure.key
    -out {{ apache_ssl_dir }}/secure.crt
    -subj "/CN=secure.{{ bind_domain }}"
  args:
    creates: "{{ apache_ssl_dir }}/secure.crt"

- name: Deploy Apache httpd.conf
  template:
    src: httpd.conf.j2
    dest: "{{ apache_conf_dir }}/httpd.conf"
    mode: "0644"

- name: Deploy Apache vhost configs from template
  template:
    src: "{{ 'secure.conf.j2' if item.ssl | default(false) else 'www.conf.j2' }}"
    dest: "{{ apache_sites_dir }}/{{ item.name }}.conf"
    mode: "0644"
  loop: "{{ apache_sites }}"
  vars:
    site_name: "{{ item.name }}"
    site_ip: "{{ item.ip }}"
    site_port: "{{ item.port }}"

    
- name: Remove old apache container
  containers.podman.podman_container:
    name: "{{ apache_container_name }}"
    state: absent

- name: Run apache container
  containers.podman.podman_container:
    name: "{{ apache_container_name }}"
    image: "{{ apache_image }}"
    state: started
    recreate: yes
    network: host
    volume:
      - "{{ apache_conf_dir }}/httpd.conf:/usr/local/apache2/conf/httpd.conf:Z"
      - "{{ apache_sites_dir }}:/usr/local/apache2/conf/sites:Z"
      - "{{ apache_docroot_dir }}:/usr/local/apache2/htdocs:Z"
      - "{{ apache_ssl_dir }}:/usr/local/apache2/conf/ssl:Z"

=== roles/apache-blue/files/index-www2.html ===
<h1>MAGIC#48 - www2.blue.lab</h1>

=== roles/apache-blue/files/index-www1.html ===
<h1>MAGIC#48 - www1.blue.lab</h1>

=== roles/apache-blue/files/index-secure.html ===
<h1>MAGIC#48 - secure.blue.lab</h1>

=== roles/samba/templates/smb.conf.j2 ===
[global]
	workgroup = SAMBA
	security = user
	passdb backend = tdbsam
	printing = cups
	printcap name = cups
	load printers = yes
	cups options = raw
	include = /etc/samba/usershares.conf

[homes]
	comment = Home Directories
	valid users = %S, %D%w%S
	browseable = No
	read only = No
	inherit acls = Yes

[printers]
	comment = All Printers
	path = /var/tmp
	printable = Yes
	create mask = 0600
	browseable = No

[print$]
	comment = Printer Drivers
	path = /var/lib/samba/drivers
	write list = @printadmin root
	force group = @printadmin
	create mask = 0664
	directory mask = 0775

[samba-public]
   path = {{ samba_public_path }}
   browseable = yes
   writable = yes
   guest ok = yes
   read only = no

[samba-private]
   path = {{ samba_private_path }}
   browseable = no
   valid users = {{ samba_valid_users | join(', ') }}
   write list = {{ samba_write_users | join(', ') }}
   read only = no
=== roles/samba/tasks/main.yml ===
- name: Install Samba packages
  dnf:
    name: "{{ samba_packages }}"
    state: present

- name: Ensure public share directory exists
  file:
    path: "{{ samba_public_path }}"
    state: directory
    mode: '0777'

- name: Create samba users
  loop: "{{ samba_valid_users }}"
  loop_control:
    loop_var: samba_user
  user:
    name: "{{ samba_user }}"
    state: present

- name: Set samba passwords
  loop: "{{ samba_valid_users }}"
  loop_control:
    loop_var: samba_user
  expect:
    command: "smbpasswd -a {{ samba_user }}"
    responses:
      (?i)New SMB password: "{{ samba_user }}\n"
      (?i)Retype new SMB password: "{{ samba_user }}\n"

- name: Ensure private share directory exists
  file:
    path: "{{ samba_private_path }}"
    state: directory
    mode: '0770'
    owner: "{{ samba_write_users[0] }}"
    group: "{{ samba_write_users[0] }}"


- name: Set ACL for read-only user
  command: "setfacl -m u:{{ samba_valid_users[1] }}:rx {{ samba_private_path }}"

- name: Deploy smb.conf
  template:
    src: smb.conf.j2
    dest: /etc/samba/smb.conf
    owner: root
    group: root
    mode: '0644'
  notify: Restart Samba

- name: Enable and start smb service
  systemd:
    name: smb
    enabled: true
    state: started

=== roles/samba/handlers/main.yml ===
---
- name: Restart Samba
  systemd:
    name: smb
    state: restarted

